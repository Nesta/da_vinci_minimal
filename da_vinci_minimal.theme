<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Link;
use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function da_vinci_minimal_preprocess_html(&$variables) {
  $http_equiv = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'http-equiv' => 'x-ua-compatible',
      'content' => 'ie=edge',
    ],
  ];
  $variables['page']['#attached']['html_head'][] = [$http_equiv, 'http-equiv'];
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function da_vinci_minimal_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] == 'system_menu_block' && isset($variables['attributes']['id'])) {
    $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
  }
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }

  // Add the block type class to the custom blocks.
  if (isset($variables['content']['#block_content'])) {
    $block_type = $variables['content']['#block_content']->bundle();
    $variables['attributes']['class'][] = 'block-content-type-' . $block_type;
  }

  // Add the block view mode class to the custom blocks.
  if (isset($variables['elements']['#configuration']['view_mode'])) {
    $block_view_mode = $variables['elements']['#configuration']['view_mode'];
    $variables['attributes']['class'][] = 'block--view-mode-' . $block_view_mode;
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 * @param array $suggestions
 * @param array $variables
 */
function da_vinci_minimal_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter() for get page template suggestions based on the node type.
 */
function da_vinci_minimal_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (!$node instanceof Node) {
      $node = Node::load($node);
    }
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;
  }
}
